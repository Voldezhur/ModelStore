import 'package:flutter/material.dart';
import 'package:modelstore/models/cart_item.dart';
import 'package:modelstore/utilities/api_handling/api_service.dart';
import 'package:modelstore/widgets/items_display/cart_card.dart';

class CartPage extends StatefulWidget {
  const CartPage({super.key});

  @override
  State<CartPage> createState() => _CartPageState();
}

class _CartPageState extends State<CartPage> {
  late Future<List<CartItem>> cart;

  // –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
  void _removeItem(itemId) async {
    await ApiService().removeCartItem(itemId);

    setState(() {
      cart = ApiService().getCart();
    });
  }

  // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ / —É–º–µ–Ω—å—à–µ–Ω–∏–µ —á–∏—Å–ª–∞ –º–æ–¥–µ–ª–µ–π –≤ –∫–æ—Ä–∑–∏–Ω–µ
  void _incrementItem(itemId, amount, adding) async {
    await ApiService()
        .incrementCartItem({"product_id": itemId, "quantity": amount}, adding);

    // setState(() {
    //   cart = ApiService().getCart();
    // });
  }

  @override
  void initState() {
    cart = ApiService().getCart();
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–ö–æ—Ä–∑–∏–Ω–∞'),
      ),
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º FutureBuilder –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã
      body: FutureBuilder<List<CartItem>>(
        future: cart,
        builder: (context, snapshot) {
          // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤—ã–≤–æ–¥–∏–º:
          // –ï—Å–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –æ—à–∏–±–∫—É
          else if (snapshot.hasError) {
            return Center(child: Text('Error: ${snapshot.error}'));
          }
          // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ
          else if (!snapshot.hasData || snapshot.data!.isEmpty) {
            return const Center(
              child: Text(
                "–ü—É—Å—Ç–æ ü§∑\n –ù–µ—Ç –º–æ–¥–µ–ª–µ–π –≤ –∫–æ—Ä–∑–∏–Ω–µ",
                style: TextStyle(fontSize: 15),
                textAlign: TextAlign.center,
              ),
            );
          }

          // –ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ snapshot —Ç–æ—á–Ω–æ –µ—Å—Ç—å
          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫ –∏ —Å—Ç—Ä–æ–∏–º GridView
          final cartList = snapshot.data!;

          return Expanded(
            child: Stack(
              children: [
                ListView.builder(
                  itemCount: cartList.length,
                  itemBuilder: (BuildContext context, int index) {
                    return CartCard(
                      cartItem: cartList[index],
                      removeItem: _removeItem,
                      incrementItem: _incrementItem,
                    );
                  },
                ),
                Align(
                  alignment: Alignment.bottomCenter,
                  child: Container(
                    margin: const EdgeInsets.only(bottom: 10),
                    decoration: BoxDecoration(
                      borderRadius: const BorderRadius.all(Radius.circular(20)),
                      color: Theme.of(context).disabledColor,
                    ),
                    padding: const EdgeInsets.all(16.0),
                    child: Text(
                      '–°—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã: ${cartList.fold(0, (sum, item) => sum + (item.item.price * item.amount))}',
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 16,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}

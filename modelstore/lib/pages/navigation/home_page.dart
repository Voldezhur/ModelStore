import 'package:flutter/material.dart';
import 'package:modelstore/models/item.dart';
import 'package:modelstore/pages/items/add_item_page.dart';
import 'package:modelstore/utilities/api_handling/api_service.dart';
import 'package:modelstore/widgets/items_display/item_card.dart';

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  late Future<List<Item>> itemList; // –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
  String title = '–ì–ª–∞–≤–Ω–∞—è'; // –ó–∞–≥–æ–ª–æ–≤–æ–∫ AppBar

  var searchController = TextEditingController();

  String search = '';
  String filter = '';

  @override
  void initState() {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–µ–∫–µ–Ω–¥–∞
    itemList = ApiService().getProducts();

    super.initState();
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
  void _addItem(item) async {
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–¥
    // item - JSON –æ–±—ä–µ–∫—Ç
    await ApiService().addProduct(item);

    setState(() {
      // –ü–æ–¥–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–¥
      itemList = ApiService().getProducts();
    });
  }

  void _removeItem(id) async {
    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –±–¥ –ø–æ –∞–π–¥–∏
    await ApiService().deleteProductById(id);

    setState(() {
      // –ü–æ–¥–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–¥
      itemList = ApiService().getProducts();
    });
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
  void _addToCart(productId) {
    ApiService().addtoCart(
      {
        'product_id': productId,
        'quantity': 1,
      },
    );
  }

  // –û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  void _getProductsFiltered() {
    setState(() {
      search = searchController.text;
      itemList = ApiService().getProductsFiltered(search, filter);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(title),
      ),
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º FutureBuilder –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã
      body: FutureBuilder<List<Item>>(
        future: itemList,
        builder: (context, snapshot) {
          // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤—ã–≤–æ–¥–∏–º:
          // –ï—Å–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –æ—à–∏–±–∫—É
          else if (snapshot.hasError) {
            return Center(child: Text('Error: ${snapshot.error}'));
          }
          // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ
          else if (!snapshot.hasData || snapshot.data!.isEmpty) {
            return const Center(
              child: Text(
                "–ü—É—Å—Ç–æ ü§∑\n –ú–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                style: TextStyle(fontSize: 15),
                textAlign: TextAlign.center,
              ),
            );
          }

          // –ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ snapshot —Ç–æ—á–Ω–æ –µ—Å—Ç—å
          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫ –∏ —Å—Ç—Ä–æ–∏–º GridView
          final modelList = snapshot.data!;

          return Column(
            children: [
              // –ü–æ–∏—Å–∫ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
              Align(
                alignment: Alignment.bottomCenter,
                child: Container(
                  margin: const EdgeInsets.fromLTRB(8, 16, 8, 16),
                  decoration: BoxDecoration(
                    borderRadius: const BorderRadius.all(Radius.circular(20)),
                    color: Theme.of(context).primaryColor,
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      // –°—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞
                      Container(
                        width: MediaQuery.sizeOf(context).width * 0.5,
                        padding: const EdgeInsets.all(16),
                        decoration: const BoxDecoration(
                          borderRadius: BorderRadius.all(Radius.circular(20)),
                        ),
                        child: TextField(
                          controller: searchController,
                          decoration: const InputDecoration(
                            hintText: '–ü–æ–∏—Å–∫...',
                            hintFadeDuration: Duration(milliseconds: 200),
                          ),
                        ),
                      ),
                      // –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
                      IconButton(
                        onPressed: _getProductsFiltered,
                        icon: const Icon(Icons.search),
                      ),
                      // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é
                      PopupMenuButton(
                        itemBuilder: (context) => [
                          const PopupMenuItem(
                            value: 1,
                            child: Text('–ü–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é'),
                          ),
                          const PopupMenuItem(
                            value: 2,
                            child: Text('–ü–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é'),
                          ),
                          const PopupMenuItem(
                            value: 3,
                            child: Text('–í –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ'),
                          ),
                          const PopupMenuItem(
                            value: 4,
                            child: Text('–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä'),
                          ),
                        ],
                        onSelected: (value) {
                          switch (value) {
                            case 1:
                              filter = 'price asc';
                              break;
                            case 2:
                              filter = 'price desc';
                              break;
                            case 3:
                              filter = 'name';
                              break;
                            default:
                              filter = '';
                              break;
                          }

                          _getProductsFiltered();
                        },
                      ),
                    ],
                  ),
                ),
              ),
              // –ö–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
              Expanded(
                child: GridView.builder(
                    gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                      crossAxisCount: 2,
                      childAspectRatio: (MediaQuery.of(context).size.width) /
                          (MediaQuery.of(context).size.height / 1.2),
                    ),
                    itemCount: modelList.length,
                    itemBuilder: (BuildContext context, int index) {
                      // –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
                      return ItemCard(
                        item: modelList[index],
                        removeItem: _removeItem,
                        addToCart: _addToCart,
                      );
                    }),
              ),
            ],
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () async {
          final result = await Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => const AddItemPage(),
            ),
          );

          if (result != null) {
            _addItem(result);
          }
        },
        child: const Icon(Icons.add),
      ),
    );
  }
}

import 'package:flutter/material.dart';
import 'package:modelstore/models/item.dart';
import 'package:modelstore/pages/items/add_item_page.dart';
import 'package:modelstore/utilities/api_handling/api_service.dart';
import 'package:modelstore/widgets/items_display/item_card.dart';

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  late Future<List<Item>> itemList; // –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
  String title = '–ì–ª–∞–≤–Ω–∞—è'; // –ó–∞–≥–æ–ª–æ–≤–æ–∫ AppBar

  @override
  void initState() {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–µ–∫–µ–Ω–¥–∞
    itemList = ApiService().getProducts();

    super.initState();
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
  void _addItem(item) {
    setState(() {
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–¥
      // item - JSON –æ–±—ä–µ–∫—Ç
      ApiService().addProduct(item);
      // –ü–æ–¥–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–¥
      itemList = ApiService().getProducts();
    });
  }

  void _removeItem(id) {
    setState(() {
      // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –±–¥ –ø–æ –∞–π–¥–∏
      ApiService().deleteProductById(id);
      // –ü–æ–¥–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–¥
      itemList = ApiService().getProducts();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
          title: Text(title),
        ),
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º FutureBuilder –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        body: FutureBuilder<List<Item>>(
          future: itemList,
          builder: (context, snapshot) {
            // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤—ã–≤–æ–¥–∏–º:
            // –ï—Å–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if (snapshot.connectionState == ConnectionState.waiting) {
              return const Center(child: CircularProgressIndicator());
            }
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –æ—à–∏–±–∫—É
            else if (snapshot.hasError) {
              return Center(child: Text('Error: ${snapshot.error}'));
            }
            // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ
            else if (!snapshot.hasData || snapshot.data!.isEmpty) {
              return const Center(
                child: Text(
                  "–ü—É—Å—Ç–æ ü§∑\n –ú–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                  style: TextStyle(fontSize: 15),
                  textAlign: TextAlign.center,
                ),
              );
            }

            // –ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ snapshot —Ç–æ—á–Ω–æ –µ—Å—Ç—å
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫ –∏ —Å—Ç—Ä–æ–∏–º GridView
            final modelList = snapshot.data!;

            return GridView.builder(
                gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: 2,
                  childAspectRatio: (MediaQuery.of(context).size.width) /
                      (MediaQuery.of(context).size.height / 1.2),
                ),
                itemCount: modelList.length,
                itemBuilder: (BuildContext context, int index) {
                  // –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏ –∏–Ω–¥–µ–∫—Å –¥–∞–Ω–Ω–π–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
                  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                  // –ó–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–∞–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                  return ItemCard(
                      item: modelList[index], removeItem: _removeItem);
                });
          },
        ),
        floatingActionButton: FloatingActionButton(
          onPressed: () async {
            final result = await Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => const AddItemPage(),
              ),
            );

            if (result != null) {
              _addItem(result);
            }
          },
          child: const Icon(Icons.add),
        ));
  }
}
